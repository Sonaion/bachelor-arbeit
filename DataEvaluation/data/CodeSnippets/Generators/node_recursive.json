{
    "font-normal": "JetBrainsMono-Regular.ttf",
    "font-bold": "JetBrainsMono-Bold.ttf",
    "font-italic": "JetBrainsMono-BoldItalic.ttf",
    "font-bold-italic": "JetBrainsMono-Italic.ttf",
    "font-size": 14,
    "width-margin": 5,
    "height-margin": 5,
    "spacing": 8,
    "background-color": [
        255,
        255,
        255
    ],
    "source-code": [
        "[AOI=Class]class Node:",
        "    def __init__(self, value):",
        "        self.value = value",
        "        self.left = None",
        "        self.right = None",
        "",
        "    def pre_order_iter(self):",
        "        result = []",
        "        result.append(self)",
        "        if self.left is not None:",
        "            left = self.left.pre_order_iter()",
        "            result = result + left",
        "        if self.right is not None:",
        "            right = self.right.pre_order_iter()",
        "            result = result + right",
        "        return result[/AOI]",
        "",
        "",
        "[AOI=Helper][AOI=HelperDeclaration]def helper(first, second, second_len=None):[/AOI]",
        "[AOI=HelperBody][AOI=RecursiveBaseCase]    if len(first) == 0:",
        "        return []",
        "",
        "    if len(second) == 0:",
        "        return [][/AOI]",
        "",
        "    if second_len is None:",
        "        return [AOI=RecursiveCall]helper(first, second, len(second))[/AOI]",
        "",
        "    result = [(first[0], second[0])]",
        "    if len(second) == second_len:",
        "        inner = [AOI=RecursiveCall]helper(first, second[1:], second_len)[/AOI]",
        "        outer = [AOI=RecursiveCall]helper(first[1:], second, second_len)[/AOI]",
        "        result = result + inner + outer",
        "    else:",
        "        inner = [AOI=RecursiveCall]helper(first, second[1:], second_len)[/AOI]",
        "        result = result + inner",
        "    return result[/AOI][/AOI]",
        "",
        "",
        "[AOI=Method][AOI=MethodDeclaration]def function(powerset):[/AOI]",
        "[AOI=MethodBody][AOI=RecursiveBaseCase]    if len(powerset) == 0:",
        "        return 0[/AOI]",
        "    return powerset[0][0].value * powerset[0][1].value + [AOI=RecursiveCall]function(powerset[1:])[/AOI][/AOI][/AOI]",
        "",
        "",
        "[AOI=InputPreparation]n = Node(2)",
        "n.left = Node(1)",
        "n.right = Node(3)[/AOI]",
        "[AOI=StartOfAlgorithm]print(function(helper(n.pre_order_iter(), n.pre_order_iter())))[/AOI]",
        ""
    ]
}